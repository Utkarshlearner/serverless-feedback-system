AWSTemplateFormatVersion: '2010-09-09'
Description: "Creating Lambda for serverless-feedback-system"

Parameters:
  LambdaRoleName:
    Type: String
    Description: RoleName
    Default: "feedback-rating-lambda-role"
  LambdaName:
    Type: String
    Description: LambdaName
    Default: "Feedback_SubmitFunction"

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Handler: index.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaRoleName}
      Runtime: python3.9
      Timeout: 300
      Tags:
        - Key: Project
          Value: serverless-feedback-system
        - Key: Environment
          Value: Dev
      Code:
        ZipFile: |
          import json
          import boto3
          import uuid
          import datetime

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('FeedbackTable')

          def lambda_handler(event, context):
            try:
                # Parse and validate input
                if 'body' not in event:
                    return response(400, {'message': 'Missing request body'})

                try:
                    data = json.loads(event['body'])
                except Exception as e:
                    return response(400, {'message': 'Invalid JSON format'})

                # Required fields
                required_fields = ['user_id', 'product_id', 'feedback', 'rating']
                for field in required_fields:
                    if field not in data or not data[field]:
                        return response(400, {'message': f'Missing or empty field: {field}'})

                # Validate rating
                try:
                    rating = int(data['rating'])
                    if rating < 1 or rating > 5:
                        return response(400, {'message': 'Rating must be an integer between 1 and 5'})
                except Exception as e:
                    return response(400, {'message': 'Rating must be an integer between 1 and 5'})

                # Prepare item
                item = {
                    'id': str(uuid.uuid4()),
                    'user_id': data['user_id'],
                    'product_id': data['product_id'],
                    'feedback': data['feedback'],
                    'rating': rating,
                    'created_at': datetime.datetime.utcnow().isoformat()
                }

                # Write to DynamoDB
                try:
                    table.put_item(Item=item)
                except Exception as e:
                    return response(500, {'message': 'Error writing to database', 'error': str(e)})

              return response(200, {'message': 'Feedback submitted successfully'})

            except Exception as e:
                return response(500, {'message': 'Unexpected error occurred', 'error': str(e)})


          def response(status_code, body):
              return {
                  'statusCode': status_code,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST,GET'
                  },
                  'body': json.dumps(body)
              }
  
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaName}
      RetentionInDays: 1
      Tags:
        - Key: Project
          Value: serverless-feedback-system
        - Key: Environment
          Value: Dev
