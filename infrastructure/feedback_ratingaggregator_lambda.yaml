AWSTemplateFormatVersion: '2010-09-09'
Description: "Creating Lambda for serverless-feedback-system"

Parameters:
  LambdaRoleName:
    Type: String
    Description: RoleName
    Default: "feedback-rating-lambda-role"
  LambdaName:
    Type: String
    Description: LambdaName
    Default: "Feedback_RatingAggregator"

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Handler: index.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaRoleName}
      Runtime: python3.9
      Timeout: 300
      Tags:
        - Key: Project
          Value: serverless-feedback-system
        - Key: Environment
          Value: Dev
      Code:
        ZipFile: |
          import json
          import boto3
          from decimal import Decimal
          from datetime import datetime

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('FeedbackRatingStatsTable')

          def lambda_handler(event, context):
              try:
                  print("Received event:", json.dumps(event))

                  for record in event['Records']:
                      try:
                          print("Processing record:", json.dumps(record))
                          event_name = record['eventName']

                          if event_name not in ['INSERT', 'REMOVE']:
                              print("Skipping non-insert/remove event")
                              continue

                          if event_name == 'INSERT':
                              image = record['dynamodb']['NewImage']
                              delta = int(image['rating']['N'])
                              adjustment = 1
                              print("Processing INSERT event")

                          elif event_name == 'REMOVE':
                              image = record['dynamodb']['OldImage']
                              delta = -int(image['rating']['N'])
                              adjustment = -1
                              print("Processing REMOVE event")

                          product_id = image['product_id']['S']

                          # Fetch existing stats
                          response = table.get_item(Key={'product_id': product_id})
                          item = response.get('Item')

                          if not item:
                              if event_name == 'INSERT':
                                  # First feedback for product
                                  table.put_item(Item={
                                      'product_id': product_id,
                                      'rating_sum': delta,
                                      'rating_count': adjustment,
                                      'average': Decimal(str(round(delta, 2))),
                                      'last_updated': datetime.utcnow().isoformat()
                                  })
                                  print("Created new stats record.")
                              else:
                                  print("REMOVE event but no stats record found. Skipping.")
                              continue

                          # Update stats
                          rating_sum = int(item['rating_sum']) + delta
                          rating_count = int(item['rating_count']) + adjustment

                          if rating_count <= 0:
                              print("No remaining feedback. Deleting stats record.")
                              table.delete_item(Key={'product_id': product_id})
                              continue

                          average = round(rating_sum / rating_count, 2)

                          table.put_item(Item={
                              'product_id': product_id,
                              'rating_sum': rating_sum,
                              'rating_count': rating_count,
                              'average': Decimal(str(average)),
                              'last_updated': datetime.utcnow().isoformat()
                          })

                          print(f"Updated stats: Sum={rating_sum}, Count={rating_count}, Avg={average}")

                      except Exception as e:
                          print(f"Error processing record: {json.dumps(record)}")
                          print(f"Error details: {str(e)}")

                  return {
                      'statusCode': 200,
                      'body': json.dumps({'message': 'Stream processing completed'})
                  }

              except Exception as e:
                  print("Fatal error during Lambda execution:")
                  print(f"Error details: {str(e)}")
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': 'Failed to process stream records', 'details': str(e)})
                  }
     
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaName}
      RetentionInDays: 1
      Tags:
        - Key: Project
          Value: serverless-feedback-system
        - Key: Environment
          Value: Dev

  StreamMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      EventSourceArn: !ImportValue FeedbackTable-StreamArn
      FunctionName: !GetAtt LambdaFunction.Arn
      StartingPosition: LATEST