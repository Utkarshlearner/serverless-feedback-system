AWSTemplateFormatVersion: '2010-09-09'
Description: "Creating Lambda for serverless-feedback-system"

Parameters:
  LambdaRoleName:
    Type: String
    Description: RoleName
    Default: "feedback-rating-lambda-role"
  LambdaName:
    Type: String
    Description: LambdaName
    Default: "Feedback_RetrieverFunction"

Resources:
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref LambdaName
      Handler: index.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaRoleName}
      Runtime: python3.9
      Timeout: 300
      Tags:
        - Key: Project
          Value: serverless-feedback-system
        - Key: Environment
          Value: Dev
      Code:
        ZipFile: |
          import boto3
          import json
          import uuid
          from boto3.dynamodb.conditions import Key, Attr
          from datetime import datetime
          from decimal import Decimal

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table('FeedbackTable')
          s3 = boto3.client('s3')
          S3_BUCKET_NAME = 'serverless-feedback-dev'

          # Custom JSON encoder to handle Decimal types
          class DecimalEncoder(json.JSONEncoder):
              def default(self, obj):
                  if isinstance(obj, Decimal):
                      return int(obj) if obj % 1 == 0 else float(obj)
                  return super(DecimalEncoder, self).default(obj)

          def lambda_handler(event, context):
              try:
                  print("Received event:", json.dumps(event))
                  body = json.loads(event.get('body', '{}'))
                  print("Parsed body:", body)

                  product_id = body.get('product_id')
                  start_date = body.get('start_date')
                  end_date = body.get('end_date')

                  if not product_id:
                      print("Missing product_id in request body")
                      return {'statusCode': 400, 'body': json.dumps({'error': 'Missing product_id'})}

                  # Validate date format if provided
                  if start_date and end_date:
                      try:
                          start_date_obj = datetime.strptime(start_date, "%Y-%m-%d")
                          end_date_obj = datetime.strptime(end_date, "%Y-%m-%d")

                          if end_date_obj < start_date_obj:
                              return {
                                  'statusCode': 400,
                                  'body': json.dumps({'error': 'end_date must be equal to or after start_date'})
                              }

                      except ValueError:
                          return {
                              'statusCode': 400,
                              'body': json.dumps({'error': 'Dates must be in YYYY-MM-DD format'})
                          }

                  print(f"Querying feedback for product_id: {product_id}")
                  key_expr = Key('product_id').eq(product_id)
                  filter_expr = None

                  if start_date and end_date:
                      print(f"Applying date filter: from {start_date} to {end_date}")
                      filter_expr = Attr('created_at').between(start_date + "T00:00:00", end_date + "T23:59:59")

                  if filter_expr:
                      response = table.query(
                          IndexName='ProductIndex',
                          KeyConditionExpression=key_expr,
                          FilterExpression=filter_expr
                      )
                  else:
                      response = table.query(
                          IndexName='ProductIndex',
                          KeyConditionExpression=key_expr
                      )

                  print("DynamoDB query response:", response)
                  items = response.get('Items', [])
                  print(f"Number of feedback items found: {len(items)}")

                  items.sort(key=lambda x: x.get('created_at', ''), reverse=True)
                  data_json = json.dumps(items, cls=DecimalEncoder)
                  data_size = len(data_json.encode('utf-8'))
                  print(f"Data size in bytes: {data_size}")

                  if data_size > 1024:
                      object_key = f"feedback/{product_id}-{uuid.uuid4()}.json"
                      print(f"Uploading large data to S3 with key: {object_key}")

                      s3.put_object(Bucket=S3_BUCKET_NAME, Key=object_key, Body=data_json, ContentType='application/json')

                      presigned_url = s3.generate_presigned_url(
                          'get_object',
                          Params={'Bucket': S3_BUCKET_NAME, 'Key': object_key},
                          ExpiresIn=7200
                      )

                      print("Returning presigned URL")
                      return {
                          'statusCode': 200,
                          'body': json.dumps({'download_url': presigned_url})
                      }

                  print("Returning data directly in response")
                  return {
                        'statusCode': 200,
                        'body': data_json
                  }

              except Exception as e:
                  print("Error occurred:", str(e))
                  return {
                      'statusCode': 500,
                      'body': json.dumps({'error': 'Internal server error', 'details': str(e)})
                  }

          

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${LambdaName}
      RetentionInDays: 1
      Tags:
        - Key: Project
          Value: serverless-feedback-system
        - Key: Environment
          Value: Dev
